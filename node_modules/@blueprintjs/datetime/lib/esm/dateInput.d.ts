/// <reference types="react" />
import { DayPickerProps } from "react-day-picker/types/props";
import { AbstractPureComponent, HTMLInputProps, IInputGroupProps, IPopoverProps, IProps } from "@blueprintjs/core";
import { IDateFormatProps } from "./dateFormat";
import { IDatePickerBaseProps } from "./datePickerCore";
import { ITimePickerProps, TimePickerPrecision } from "./timePicker";
export interface IDateInputProps extends IDatePickerBaseProps, IDateFormatProps, IProps {
    /**
     * Allows the user to clear the selection by clicking the currently selected day.
     * Passed to `DatePicker` component.
     * @default true
     */
    canClearSelection?: boolean;
    /**
     * Whether the calendar popover should close when a date is selected.
     * @default true
     */
    closeOnSelection?: boolean;
    /**
     * Props to pass to ReactDayPicker. See API documentation
     * [here](http://react-day-picker.js.org/docs/api-daypicker.html).
     *
     * The following props are managed by the component and cannot be configured:
     * `canChangeMonth`, `captionElement`, `fromMonth` (use `minDate`), `month` (use
     * `initialMonth`), `toMonth` (use `maxDate`).
     */
    dayPickerProps?: DayPickerProps;
    /**
     * Whether the date input is non-interactive.
     * @default false
     */
    disabled?: boolean;
    /**
     * The default date to be used in the component when uncontrolled.
     */
    defaultValue?: Date;
    /**
     * Props to pass to the [input group](#core/components/forms/input-group.javascript-api).
     * `disabled` and `value` will be ignored in favor of the top-level props on this component.
     * `type` is fixed to "text" and `ref` is not supported; use `inputRef` instead.
     */
    inputProps?: HTMLInputProps & IInputGroupProps;
    /**
     * Called when the user selects a new valid date through the `DatePicker` or by typing
     * in the input.
     */
    onChange?: (selectedDate: Date) => void;
    /**
     * Called when the user finishes typing in a new date and the date causes an error state.
     * If the date is invalid, `new Date(undefined)` will be returned. If the date is out of range,
     * the out of range date will be returned (`onChange` is not called in this case).
     */
    onError?: (errorDate: Date) => void;
    /**
     * Props to pass to the `Popover`.
     * Note that `content`, `autoFocus`, and `enforceFocus` cannot be changed.
     */
    popoverProps?: Partial<IPopoverProps> & object;
    /**
     * Element to render on right side of input.
     */
    rightElement?: JSX.Element;
    /**
     * The currently selected day. If this prop is provided, the component acts in a controlled manner.
     * To display no date in the input field, pass `null` to the value prop. To display an invalid date error
     * in the input field, pass `new Date(undefined)` to the value prop.
     */
    value?: Date | null;
    /**
     * Any props to be passed on to the `TimePicker`. `value`, `onChange`, and
     * `timePrecision` will be ignored in favor of the corresponding top-level
     * props on this component.
     */
    timePickerProps?: ITimePickerProps;
    /**
     * Adds a time chooser to the bottom of the popover.
     * Passed to the `DateTimePicker` component.
     */
    timePrecision?: TimePickerPrecision;
}
export interface IDateInputState {
    value: Date;
    valueString: string;
    isInputFocused: boolean;
    isOpen: boolean;
}
export declare class DateInput extends AbstractPureComponent<IDateInputProps, IDateInputState> {
    static displayName: string;
    static defaultProps: Partial<IDateInputProps>;
    state: IDateInputState;
    private inputEl;
    private popoverContentEl;
    private lastElementInPopover;
    private refHandlers;
    componentWillUnmount(): void;
    render(): JSX.Element;
    componentWillReceiveProps(nextProps: IDateInputProps): void;
    private getInputPropsWithDefaults();
    private isDateInRange(value);
    private handleClosePopover;
    private handleDateChange;
    private hasMonthChanged(prevDate, nextDate);
    private hasTimeChanged(prevDate, nextDate);
    private handleInputFocus;
    private handleInputClick;
    private handleInputChange;
    private handleInputBlur;
    private handleInputKeyDown;
    private handlePopoverBlur;
    private registerPopoverBlurHandler;
    private unregisterPopoverBlurHandler;
    /** safe wrapper around invoking input props event handler (prop defaults to undefined) */
    private safeInvokeInputProp(name, e);
    private parseDate(dateString);
    private formatDate(date);
}
