/*
 * Copyright 2015 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the terms of the LICENSE file distributed with this project.
 */
import * as tslib_1 from "tslib";
import { Icon, Utils as BlueprintUtils } from "@blueprintjs/core";
import * as React from "react";
import * as Classes from "./common/classes";
import * as Utils from "./common/utils";
var DatePickerCaption = /** @class */ (function (_super) {
    tslib_1.__extends(DatePickerCaption, _super);
    function DatePickerCaption() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            monthWidth: 0,
        };
        _this.containerRefHandler = function (r) { return (_this.containerElement = r); };
        _this.handleMonthSelectChange = function (e) {
            var month = parseInt(e.target.value, 10);
            BlueprintUtils.safeInvoke(_this.props.onMonthChange, month);
        };
        _this.handleYearSelectChange = function (e) {
            var year = parseInt(e.target.value, 10);
            BlueprintUtils.safeInvoke(_this.props.onYearChange, year);
        };
        return _this;
    }
    DatePickerCaption.prototype.render = function () {
        var _a = this.props, date = _a.date, locale = _a.locale, localeUtils = _a.localeUtils, minDate = _a.minDate, maxDate = _a.maxDate;
        var minYear = minDate.getFullYear();
        var maxYear = maxDate.getFullYear();
        var displayMonth = date.getMonth();
        var displayYear = date.getFullYear();
        // build the list of available months, limiting based on minDate and maxDate as necessary
        var months = localeUtils.getMonths(locale);
        var startMonth = displayYear === minYear ? minDate.getMonth() : 0;
        var endMonth = displayYear === maxYear ? maxDate.getMonth() + 1 : undefined;
        var monthOptionElements = months
            .map(function (name, i) {
            return (React.createElement("option", { key: i, value: i.toString() }, name));
        })
            .slice(startMonth, endMonth);
        var years = [minYear];
        for (var year = minYear + 1; year <= maxYear; ++year) {
            years.push(year);
        }
        var yearOptionElements = years.map(function (year, i) {
            return (React.createElement("option", { key: i, value: year.toString() }, year));
        });
        // allow out-of-bounds years but disable the option. this handles the Dec 2016 case in #391.
        if (displayYear > maxYear) {
            yearOptionElements.push(React.createElement("option", { key: "next", disabled: true, value: displayYear.toString() }, displayYear));
        }
        this.displayedMonthText = months[displayMonth];
        var monthSelect = (React.createElement("div", { className: Classes.DATEPICKER_CAPTION_SELECT, key: "month" },
            React.createElement("select", { className: Classes.DATEPICKER_MONTH_SELECT, onChange: this.handleMonthSelectChange, value: displayMonth.toString() }, monthOptionElements),
            React.createElement(Icon, { className: Classes.DATEPICKER_CAPTION_CARET, icon: "caret-down", style: { left: this.state.monthWidth + 5 } })));
        var yearSelect = (React.createElement("div", { className: Classes.DATEPICKER_CAPTION_SELECT, key: "year" },
            React.createElement("select", { className: Classes.DATEPICKER_YEAR_SELECT, onChange: this.handleYearSelectChange, value: displayYear.toString() }, yearOptionElements),
            React.createElement(Icon, { className: Classes.DATEPICKER_CAPTION_CARET, icon: "caret-down" })));
        var orderedSelects = this.props.reverseMonthAndYearMenus
            ? [yearSelect, monthSelect]
            : [monthSelect, yearSelect];
        return (React.createElement("div", { className: Classes.DATEPICKER_CAPTION, ref: this.containerRefHandler }, orderedSelects));
    };
    DatePickerCaption.prototype.componentDidMount = function () {
        var _this = this;
        requestAnimationFrame(function () { return _this.positionArrows(); });
    };
    DatePickerCaption.prototype.componentDidUpdate = function () {
        this.positionArrows();
    };
    DatePickerCaption.prototype.positionArrows = function () {
        // measure width of text as rendered inside our container element.
        var monthWidth = Utils.measureTextWidth(this.displayedMonthText, Classes.DATEPICKER_CAPTION_MEASURE, this.containerElement);
        this.setState({ monthWidth: monthWidth });
    };
    return DatePickerCaption;
}(React.PureComponent));
export { DatePickerCaption };
